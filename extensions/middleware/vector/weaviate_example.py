"""
Example script demonstrating the use of the WeaviateProviderFactory abstraction layer.

This script shows how to easily switch between embedded, Docker/cloud modes
with minimal code changes.
"""
import os
import sys
import logging
import json
from typing import List, Dict, Any

# Set up logging
logging.basicConfig(level=logging.INFO, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Import the factory
from weaviate_provider_factory import WeaviateProviderFactory, WeaviateDeploymentType

# Sample data for testing
SAMPLE_DATA = [
    {
        "content": "Weaviate is a vector database that can be used for semantic search.",
        "metadata": {
            "source": "example",
            "category": "technology",
            "created_at": "2023-01-01"
        }
    },
    {
        "content": "Vector search uses embeddings to find semantically similar content.",
        "metadata": {
            "source": "example",
            "category": "technology",
            "created_at": "2023-01-02"
        }
    },
    {
        "content": "Embedded Weaviate runs in-process, ideal for development and testing.",
        "metadata": {
            "source": "example",
            "category": "development",
            "created_at": "2023-01-03"
        }
    }
]

# Sample embeddings (384-dimensional vectors truncated for brevity)
# In a real application, these would be generated by an embedding model
SAMPLE_EMBEDDINGS = [
    [0.1, 0.2, 0.3] + [0.0] * 381,  # Simplified 384-dim vector
    [0.2, 0.3, 0.4] + [0.0] * 381,  # Simplified 384-dim vector
    [0.3, 0.4, 0.5] + [0.0] * 381,  # Simplified 384-dim vector
]


def get_deployment_type() -> str:
    """
    Get the deployment type from command line arguments or environment variables
    
    Returns:
        str: The deployment type to use (embedded, docker, or cloud)
    """
    # Check command line arguments
    if len(sys.argv) > 1 and sys.argv[1] in (
        WeaviateDeploymentType.EMBEDDED, 
        WeaviateDeploymentType.DOCKER,
        WeaviateDeploymentType.CLOUD
    ):
        return sys.argv[1]
    
    # Check environment variables
    if os.environ.get("WEAVIATE_DEPLOYMENT_TYPE"):
        return os.environ.get("WEAVIATE_DEPLOYMENT_TYPE")
        
    # Default to embedded for this example
    return WeaviateDeploymentType.EMBEDDED


def get_config(deployment_type: str) -> Dict[str, Any]:
    """
    Get the appropriate configuration based on deployment type
    
    Args:
        deployment_type: The type of deployment (embedded, docker, or cloud)
        
    Returns:
        Dict[str, Any]: Configuration dictionary
    """
    if deployment_type == WeaviateDeploymentType.EMBEDDED:
        return {
            "class_name": "TestMemory",
            "persistence_data_path": "./.weaviate-data",
            "vector_dimensions": 384,
            "additional_env_vars": {
                "ENABLE_MODULES": "text2vec-openai,generative-openai"
            }
        }
    
    elif deployment_type == WeaviateDeploymentType.CLOUD:
        # For cloud, we'd need valid credentials
        cloud_url = os.environ.get("WEAVIATE_CLOUD_URL")
        api_key = os.environ.get("WEAVIATE_API_KEY")
        
        if not cloud_url or not api_key:
            logger.warning("Missing cloud credentials. Set WEAVIATE_CLOUD_URL and WEAVIATE_API_KEY.")
        
        return {
            "url": cloud_url,
            "api_key": api_key,
            "class_name": "TestMemory",
            "vector_dimensions": 384
        }
    
    else:  # Docker
        return {
            "host": "localhost",
            "port": "8080",
            "class_name": "TestMemory",
            "vector_dimensions": 384
        }


def demo_vector_search() -> None:
    """Run a demonstration of the vector search capabilities"""
    # Determine which deployment type to use
    deployment_type = get_deployment_type()
    logger.info(f"Using deployment type: {deployment_type}")
    
    # Get appropriate configuration
    config = get_config(deployment_type)
    
    try:
        # Create provider using factory
        provider = WeaviateProviderFactory.create(
            deployment_type=deployment_type,
            config=config
        )
        
        # Initialize the schema and collection
        logger.info("Initializing provider and schema...")
        provider.ensure_schema_exists()
        
        # Add sample data with embeddings
        logger.info("Adding sample data...")
        memory_ids = provider.add_memories(
            contents=[item["content"] for item in SAMPLE_DATA],
            embeddings=SAMPLE_EMBEDDINGS,
            metadatas=[item["metadata"] for item in SAMPLE_DATA]
        )
        
        logger.info(f"Added {len(memory_ids)} memories with IDs: {memory_ids}")
        
        # Retrieve one of the memories
        logger.info("Retrieving a memory...")
        memory = provider.get_memory(memory_ids[0])
        logger.info(f"Retrieved memory: {json.dumps(memory, indent=2)}")
        
        # Perform a vector search
        logger.info("Performing vector search...")
        query_embedding = [0.2, 0.25, 0.35] + [0.0] * 381  # Simplified 384-dim vector
        search_results = provider.search_by_vector(
            query_vector=query_embedding,
            limit=2,
            filters={"metadata_filter": {"path": ["metadata", "category"], "operator": "Equal", "valueText": "technology"}}
        )
        
        logger.info(f"Search results: {json.dumps(search_results, indent=2)}")
        
        # Clean up (optional)
        if deployment_type == WeaviateDeploymentType.EMBEDDED:
            logger.info("Cleaning up test data...")
            provider.clear_collection()
            
        logger.info("Demo completed successfully!")
        
    except Exception as e:
        logger.error(f"Error during demo: {e}")
        raise


if __name__ == "__main__":
    logger.info("Starting Weaviate abstraction layer demo")
    demo_vector_search() 